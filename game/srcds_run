#!/bin/sh
#
#       Copyright (c) 2004, Valve LLC. All rights reserved.
#
#	a wrapper script for the main Source engine dedicated server binary.
#	Performs auto-restarting of the server on crash. You can
#	extend this to log crashes and more.
#


get_srcds_dir() {
		SRCDS_DIR=`dirname $0`
		pushd . > /dev/null
		cd $SRCDS_DIR
		SRCDS_DIR=`pwd`
		popd > /dev/null
}

init() {
	# determine the path to the srcds install directory
	get_srcds_dir

  # setup the libraries, local dir first!
  export LD_LIBRARY_PATH="${SRCDS_DIR}:${SRCDS_DIR}/bin:${LD_LIBRARY_PATH}"  
  
	# Initialises the various variables
	# Set up the defaults
	GAME=""
	DEBUG=""
	RESTART="yes"
	# for Orange Box we have only one build as the new compiler can crunch the CPU variants all into one file
	HL="${SRCDS_DIR}/srcds_i486"
	HL_DETECT=1
	TIMEOUT=10 # time to wait after a crash (in seconds)
	CRASH_DEBUG_MSG="email debug.log to linux@valvesoftware.com"
	GDB="gdb" # the gdb binary to run
	DEBUG_LOG="${SRCDS_DIR}/debug.log"
	PID_FILE="" # only needed it DEBUG is set so init later
	STEAM=""
	PID_FILE_SET=0
	STEAMERR=""
	SIGINT_ACTION="quit 0" # exit normally on sig int
	NO_TRAP=0
	AUTO_UPDATE=""
	STEAM_USER=""
	STEAM_PASSWORD=""
	PARAMS=$*

	# use the $FORCE environment variable if its set
	if test -n "$FORCE" ; then
		# Note: command line -binary will override this
		HL=$FORCE
		HL_DETECT=0
	fi

	while test $# -gt 0; do
		case "$1" in
		"-game")
			GAME="$2"
			shift ;;
		"-debug")
			DEBUG=1
			# Ensure that PID_FILE is set
			PID_FILE_SET=1
			if test -z "$PID_FILE"; then
				PID_FILE="${SRCDS_DIR}/hlds.$$.pid"
			fi ;;
		"-norestart")
			RESTART="" ;;
		"-pidfile")
			PID_FILE="$2"
			PID_FILE_SET=1
			shift ;;
		"-binary")
			HL="$2"
			HL_DETECT=0
			shift ;;
		"-timeout")
			TIMEOUT="$2"
			shift ;;
		"-gdb")
			GDB="$2"
			shift ;;
		"-debuglog")
			DEBUG_LOG="$2"
			shift ;;
		"-autoupdate")
			AUTO_UPDATE="yes"
			if test -z "$STEAM"; then
					STEAM="${SRCDS_DIR}/steam"
			fi
			RESTART="yes" ;;
		"-steam")
      STEAM="$2"
      shift;;
		"-steamerr")
			STEAMERR=1 ;;
		"-ignoresigint")
			SIGINT_ACTION="" ;;
		"-notrap")
			NO_TRAP=1 ;;
		"-steamuser")
			STEAM_USER="$2";
			shift ;;
		"-steampass")
			STEAM_PASSWORD="$2";
			shift ;;
		"-help")
			# quit with syntax
			quit 2
			;;
		esac
		shift
	done

	# Ensure we have a game specified
	if test -z "$GAME"; then
		GAME="cstrike"
		PARAMS="$PARAMS -game $GAME"
	fi

	if test ! -d "$GAME"; then
		echo "Invalid game type '$GAME' sepecified."
		quit 1
	fi

	if test 0 -eq "$NO_TRAP"; then
		# Set up the int handler
		# N.B. Dont use SIGINT symbolic value
		#  as its just INT under ksh
		trap "$SIGINT_ACTION" 2
	fi

	# Only detect the CPU if it hasnt been set with
	# either environment or command line
	if test "$HL_DETECT" -eq 1; then
		detectcpu
	fi

	if test ! -f "$HL"; then
		echo "Source Engine binary '$HL' not found, exiting"
		quit 1
	elif test ! -x "$HL"; then
		# Could try chmod but dont know what we will be
		# chmoding so just fail.
		echo "Source engine binary '$HL' not executable, exiting"
		quit 1
	fi

	# Setup debugging
	if test -n "$DEBUG" ; then
		#turn on core dumps :) (if possible)
		echo "Enabling debug mode"
		if test "unlimited" != `ulimit -c` && test "`ulimit -c`" -eq 0 ; then
			ulimit -c 2000
		fi
		GDB_TEST=`$GDB -v`
		if test -z "$GDB_TEST"; then
			echo "Please install gdb first."
			echo "goto http://www.gnu.org/software/gdb/ "
			DEBUG="" # turn off debugging cause gdb isn't installed
		fi
	fi

	if test -n "$STEAM_PASSWORD" && test -z "$STEAM_USER"; then
		echo "You must set both the steam username and password."
		quit 1
	fi

  if test 1 -eq $PID_FILE_SET && test -n "$PID_FILE"; then
		HL_CMD="$HL $PARAMS -pidfile $PID_FILE"
	else
		HL_CMD="$HL $PARAMS"
	fi
}

syntax () {
	# Prints script syntax

	echo "Syntax:"
	echo "$0 [-game <game>] [-debug] [-norestart] [-pidfile]"
	echo "	[-binary [srcds_i486]"
	echo "	[-timeout <number>] [-gdb <gdb>] [-autoupdate]"
	echo "	[-steamerr] [-ignoresigint] [-steamuser <username>]"
	echo "	[-steampass <password>] [-debuglog <logname>]"
	echo "Params:"
	echo "-game <game>        	Specifies the <game> to run."
	echo "-debug              	Run debugging on failed servers if possible."
	echo "-debuglog <logname>	Log debug output to this file."
	echo "-norestart          	Don't attempt to restart failed servers."
	echo "-pidfile <pidfile>  	Use the specified <pidfile> to store the server pid."
	echo "-binary <binary>    	Use the specified binary ( no auto detection )."
	echo "-timeout <number>   	Sleep for <number> seconds before restarting"
	echo "			a failed server."
	echo "-gdb <gdb>          	Use <dbg> as the debugger of failed servers."
  echo "-steam                Path to steam executable (default is ./steam)"
	echo "-steamerr     	  	  Quit on steam update failure."
	echo "-steamuser <username>	Use this username for steam updates."  
	echo "-steampass <password>	Use this password for steam updates" 
	echo "			(-steamuser must be specified as well)."
	echo "-ignoresigint       	Ignore signal INT ( prevents CTRL+C quitting"
	echo "			the script )."
	echo "-notrap             	Don't use trap. This prevents automatic"
	echo "			removal of old lock files."
	echo ""
	echo "Note: All parameters specified as passed through to the server"
	echo "including any not listed."
}

debugcore () {
	# Debugs any core file if DEBUG is set and
	# the exitcode is none 0

	exitcode=$1

	if test $exitcode -ne 0; then
		if test -n "$DEBUG" ; then 
				DEBUG_CMDS="${SRCDS_DIR}/debug.cmds"
			echo "bt" > "$DEBUG_CMDS";
			echo "info locals" >> "$DEBUG_CMDS";
			echo "info sharedlibrary" >> debug.cmds
			echo "info frame" >> "$DEBUG_CMDS";  # works, but gives an error... must be last
			echo "disassemble" >> "$DEBUG_CMDS";
			echo "----------------------------------------------" >> $DEBUG_LOG
			echo "CRASH: `date`" >> $DEBUG_LOG
			echo "Start Line: $HL_CMD" >> $DEBUG_LOG

			# check to see if a core was dumped

			CORE="${SRCDS_DIR}/core"			
			if ! test -f "$CORE" ; then				 
					CORE="${SRCDS_DIR}/core".`cat $PID_FILE`
					if ! test -f "$CORE" then
							CORE="$HL.core"
							if ! test -f "$CORE" then
									CORE=""
							fi
					fi
			fi
			
			if test -n "$CORE"; then
				$GDB $HL $CORE -x "$DEBUG_CMDS" -batch >> $DEBUG_LOG
			fi
		
			echo "End of Source crash report" >> $DEBUG_LOG
			echo "----------------------------------------------" >> $DEBUG_LOG
			echo $CRASH_DEBUG_MSG
			rm -f "$DEBUG_CMDS"
		else
			echo "Add \"-debug\" to the $0 command line to generate a debug.log to help with solving this problem"
		fi
	fi
}

detectcpu() {
	# Attempts to auto detect the CPU
	echo "Auto detecting CPU"

	if test -e /proc/cpuinfo; then
		CPU_VERSION="`grep "cpu family" /proc/cpuinfo | cut -f2 -d":" | tr -d " " | uniq`";
		if test $CPU_VERSION -lt 4; then
			echo "Error: srcds REQUIRES a 486 CPU or better";
			quit 1
		fi
	else
		echo "Using default binary."
	fi
}

update() {
	 updatesingle
	 while test $? -eq 2; do
			 updatesingle
   done
}

updatesingle() {
	# Run the steam update
	# quits on failure if STEAMERR is set
  # returns 1 on success
  # returns 0 on ignored error
  # returns 2 if requires a retry

	if test -n "$AUTO_UPDATE"; then
		if test -f "$STEAM"; then
			echo "Updating server using Steam."
			# As of orange box the root is now one directory up
			DEPOT_ROOT="${SRCDS_DIR}/.."
			DEPOT_NAME="$GAME"

			if test "$GAME" = "cstrike"; then
				DEPOT_ROOT="$SRCDS_DIR"
				DEPOT_NAME="Counter-Strike Source";
			fi
			if test "$GAME" = "dod"; then
				DEPOT_NAME="dods";
			fi

			CMD="$STEAM -command update -dir $DEPOT_ROOT"; 
			if test -n "$STEAM_USER"; then
				CMD="$CMD -username $STEAM_USER";
			fi 
			if test -n "$STEAM_PASSWORD"; then
				CMD="$CMD -password $STEAM_PASSWORD";
			fi 

			STEAM_OUT="${SRCDS_DIR}/steam.out"
			rm -f $STEAM_OUT
			$CMD -game "$DEPOT_NAME" | tee "$STEAM_OUT"
			if test $? -ne 0; then
				grep "Steam Linux Client updated, please retry the command" "$STEAM_OUT" > /dev/null
				if test $? -eq 0; then
						return 2
				elif test -n "$STEAMERR"; then
					echo "`date`: Steam Update failed, exiting."
					quit 1
				else
					echo "`date`: Steam Update failed, ignoring."
					return 0
				fi
			fi
		else
			if test -n "$STEAMERR"; then
				echo "Could not locate steam binary:$STEAM, exiting.";
				quit 1
			else
				echo "Could not locate steam binary:$STEAM, ignoring.";
				return 0
			fi
		fi
	fi

	return 1
}
	
run() {
	# Runs the steam update and server
	# Loops if RESTART is set
	# Debugs if server failure is detected
	# Note: if RESTART is not set then
	# 1. DEBUG is set then the server is NOT exec'd
	# 2. DEBUG is not set the the server is exec'd

	if test -n "$RESTART" ; then
		echo "Server will auto-restart if there is a crash."
  fi

	#loop forever
	while true
	do
		# Update if needed
		update
		# Run the server
		$HL_CMD
		retval=$?

		debugcore $retval
  
    # if hlds quit cleanly, then it was explicitly shutdown
		# Only restart in this case if we have -autoupdate enabled
		# Break out of the loop if we have not enabled auto restarts
		if test $retval -eq 0 -a -z "$AUTO_UPDATE" || test -z "$RESTART"; then
			break; 
		fi

		# don't thrash the hard disk if the server dies, wait a little
		echo "`date`: Server restart in $TIMEOUT seconds"
		sleep $TIMEOUT
	done # while true 
}

quit() {
	# Exits with the give error code, 1
	# if none specified.
	# exit code 2 also prints syntax
	exitcode="$1"

	# default to failure
	if test -z "$exitcode"; then
		exitcode=1
	fi

	case "$exitcode" in
	0)
		echo "`date`: Server Quit" ;;
	2)
		syntax ;;
	*)
		echo "`date`: Server Failed" ;;
	esac

	# Remove pid file
	if test -n "$PID_FILE" && test -f "$PID_FILE" ; then
		# The specified pid file
		rm -f $PID_FILE
	fi

	# reset SIGINT and then kill ourselves properly
	trap - 2
	kill -2 -$$
}

# Initialise
init $*

# Run
run

# Quit normally
quit 0
